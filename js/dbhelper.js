class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_URL_R(){return"http://localhost:1337/reviews"}static readDB_Restaurants(){return idb.open("restaurants",1).then(function(t){return t.transaction("details","readonly").objectStore("details").getAll()}).then(function(t){JSON.stringify(t);return t})}static readDB_Reviews(){return idb.open("reviews",1).then(function(t){return t.transaction(["details"],"readonly").objectStore("details").getAll()}).then(function(t){JSON.stringify(t);return t})}static fetchRestaurants(t){!1!==navigator.onLine?fetch(DBHelper.DATABASE_URL).then(t=>t.json()).then(e=>{t(null,e)}).catch(function(t){}):DBHelper.readDB_Restaurants().then(function(e){t(null,e)})}static fetchReviews(t){!1!==navigator.onLine?fetch(DBHelper.DATABASE_URL_R).then(t=>t.json()).then(e=>{t(null,e)}).catch(function(t){}):DBHelper.readDB_Reviews().then(function(e){reviews=e,t(null,reviews)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((r,n)=>{if(r)e(r,null);else{const r=n.find(e=>e.id==t);r?e(null,r):e("Restaurant does not exist",null)}})}static fetchReviewsById(t,e){DBHelper.fetchReviews((r,n)=>{if(r)e(r,null);else{const r=n.find(e=>e.id==t);r?e(null,r):e("There are no reviews for this restaurant.",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,n)=>{if(r)e(r,null);else{const r=n.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=t&&(n=n.filter(e=>e.cuisine_type==t)),"all"!=e&&(n=n.filter(t=>t.neighborhood==e)),r(null,n)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),n=e.filter((t,r)=>e.indexOf(t)==r);t(null,n)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),n=e.filter((t,r)=>e.indexOf(t)==r);t(null,n)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph.small}`}static imageUrlForRestaurant_responsive(t){return`/img/${t.photograph.respons}`}static imageUrlForRestaurant_sizes(t){return`${t.photograph.sizes}`}static imageUrlForLazy_load(t){return`/img/${t.photograph.lazy}`}static restaurant_ID(t){return t.id}static restaurant_fav(t){return t.is_favorite}static fetchAndCacheRestaurants(){return fetch(DBHelper.DATABASE_URL+"restaurants").then(t=>t.json()).then(t=>this.dbPromise().then(e=>{const r=e.transaction("restaurants","readwrite"),n=r.objectStore("restaurants");return t.forEach(t=>n.put(t)),r.complete.then(()=>Promise.resolve(t))}))}static updateFavouriteStatus(t,e){return console.log("Changed state to "+e),fetch(`http://localhost:1337/restaurants/${t}?is_favorite=${e}`,{method:"PUT"}).then(()=>{console.log("status changed"),this.dbPromise()}).then(r=>{const n=r.transaction("restaurants","readwrite").objectStore("restaurants");n.get(t).then(t=>{t.is_favorite=e,n.put(restaurnt)})})}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,icon:"../img/mkrman.jpg",animation:google.maps.Animation.DROP})}}